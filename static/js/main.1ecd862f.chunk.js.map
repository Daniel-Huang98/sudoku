{"version":3,"sources":["components/NumberInput.tsx","components/Board.tsx","Constants.tsx","helpers.tsx","components/Button.tsx","components/Dashboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NumberInput","props","type","className","maxLength","style","gridColumnStart","x","gridColumnEnd","gridRowStart","y","gridRowEnd","id","onChange","EnterBoard","readOnly","play","value","input","Board","board","row","push","grid","y1","x1","clearBoard","selectBoard","label","boardArray","validInput","checkRows","checkColumns","checkAllSquares","dict","num","result","checkASquare","column","calcOptions","holes","leastOption","curr","getOptions","reverse","options","length","col","filter","ele","col1","Math","floor","row1","newBoard","i","ButtonInput","onClick","Dashboard","start","reset","Button","App","React","useState","setPlay","guess","Array","popped","setInput","invalid","setInvalid","done","setDone","count","setCount","val","setVal","loadBoard","counter","state","useEffect","guessPrune","update","tempBoard","boards","map","event","pos","target","split","inputCopy","Number","disabled","ind","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ecd862f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../css/NumberInput.css\";\n\ninterface INumberInput {\n  x: number;\n  y: number;\n  input?: number;\n  EnterBoard(event: any): void;\n  play: boolean;\n}\n\nconst NumberInput: React.FC<INumberInput> = props => {\n  return (\n    <input\n      type=\"number\"\n      className=\"NumberInput\"\n      maxLength={1}\n      style={{\n        gridColumnStart: props.x,\n        gridColumnEnd: props.x + 1,\n        gridRowStart: props.y,\n        gridRowEnd: props.y + 1\n      }}\n      id={`${props.x} ${props.y}`}\n      onChange={props.EnterBoard}\n      readOnly={props.play}\n      value={props.input === 0 ? \"\" : props.input}\n    />\n  );\n};\n\nexport default NumberInput;\n","import React from \"react\";\nimport \"../css/Board.css\";\nimport NumberInput from \"./NumberInput\";\n\ninterface IBoard {\n  EnterBoard(event: any): void;\n  play: boolean;\n  board: Array<Array<number>>;\n}\n\nconst Board: React.FC<IBoard> = props => {\n  var board = [];\n  for (var y = 1; y <= 9; y++) {\n    var row = [];\n    for (var x = 1; x <= 9; x++) {\n      row.push(\n        <NumberInput\n          x={x}\n          y={y}\n          EnterBoard={props.EnterBoard}\n          play={props.play}\n          input={props.board[y - 1][x - 1]}\n        />\n      );\n    }\n    board.push(row);\n  }\n\n  var grid = [];\n  for (var y1 = 0; y1 < 3; y1++) {\n    for (var x1 = 0; x1 < 3; x1++) {\n      grid.push(\n        <div\n          className=\"grid\"\n          style={{\n            gridColumnStart: 1 + 3 * x1,\n            gridColumnEnd: 1 + 3 * x1 + 3,\n            gridRowStart: 1 + 3 * y1,\n            gridRowEnd: 1 + 3 * y1 + 3\n          }}\n        ></div>\n      );\n    }\n  }\n\n  return (\n    <div className=\"Board\">\n      {board}\n      {grid}\n    </div>\n  );\n};\n\nexport default Board;\n","export const clearBoard = [\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0]\n];\n\nexport const clearBoard3 = [\n  [0, 0, 0, 0, 0, 7, 5, 0, 0],\n  [7, 0, 0, 1, 0, 0, 0, 4, 0],\n  [3, 0, 0, 0, 0, 0, 2, 0, 0],\n  [0, 0, 1, 3, 9, 0, 0, 0, 8],\n  [0, 0, 0, 7, 8, 6, 0, 0, 4],\n  [8, 0, 0, 0, 4, 1, 7, 0, 0],\n  [0, 0, 8, 0, 0, 0, 0, 0, 9],\n  [0, 5, 0, 0, 0, 3, 0, 0, 1],\n  [0, 0, 4, 6, 0, 0, 0, 0, 0]\n];\n\nexport const clearBoard4 = [\n  [8, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 3, 6, 0, 0, 0, 0, 0],\n  [0, 7, 0, 0, 9, 0, 2, 0, 0],\n  [0, 5, 0, 0, 0, 7, 0, 0, 0],\n  [0, 0, 0, 0, 4, 5, 7, 0, 0],\n  [0, 0, 0, 1, 0, 0, 0, 3, 0],\n  [0, 0, 1, 0, 0, 0, 0, 6, 8],\n  [0, 0, 8, 5, 0, 0, 0, 1, 0],\n  [0, 9, 0, 0, 0, 0, 4, 0, 0]\n];\n\nexport const clearBoard1 = [\n  [0, 0, 0, 0, 0, 0, 2, 0, 0],\n  [0, 8, 0, 0, 0, 7, 0, 9, 0],\n  [6, 0, 2, 0, 0, 0, 5, 0, 0],\n  [0, 7, 0, 0, 6, 0, 0, 0, 0],\n  [0, 0, 0, 9, 0, 1, 0, 0, 0],\n  [0, 0, 0, 0, 2, 0, 0, 4, 0],\n  [0, 0, 5, 0, 0, 0, 6, 0, 3],\n  [0, 9, 0, 4, 0, 0, 0, 7, 0],\n  [0, 0, 6, 0, 0, 0, 0, 0, 0]\n];\n\nexport const clearBoard2 = [\n  [0, 0, 0, 0, 0, 0, 0, 0, 8],\n  [9, 7, 8, 0, 4, 0, 1, 3, 0],\n  [0, 2, 0, 0, 0, 0, 6, 4, 0],\n  [0, 0, 5, 0, 2, 1, 9, 0, 0],\n  [1, 3, 7, 0, 9, 0, 2, 8, 6],\n  [0, 0, 6, 7, 8, 0, 5, 0, 0],\n  [0, 4, 3, 0, 0, 0, 0, 2, 0],\n  [0, 1, 2, 0, 5, 0, 3, 6, 9],\n  [8, 0, 0, 0, 0, 0, 0, 0, 0]\n];\n\nexport const selectBoard = [\n  { board: 0, label: \"empty\" },\n  { board: 1, label: \"Example 1\" },\n  { board: 2, label: \"Example 2\" },\n  { board: 3, label: \"Example 3\" },\n  { board: 4, label: \"Example 4\" }\n];\n\nexport const boardArray = [\n  clearBoard,\n  clearBoard1,\n  clearBoard2,\n  clearBoard3,\n  clearBoard4\n];\n\nconst oneSet = {\n  1: false,\n  2: false,\n  3: false,\n  4: false,\n  5: false,\n  6: false,\n  7: false,\n  8: false,\n  9: false\n};\n\nexport const rowCache = [\n  oneSet,\n  oneSet,\n  oneSet,\n  oneSet,\n  oneSet,\n  oneSet,\n  oneSet,\n  oneSet,\n  oneSet\n];\n\nexport const columnCache = [\n  oneSet,\n  oneSet,\n  oneSet,\n  oneSet,\n  oneSet,\n  oneSet,\n  oneSet,\n  oneSet,\n  oneSet\n];\n","export const validInput = (board: Array<Array<number>>): boolean => {\n  const rows = checkRows(board);\n\n  if (!rows) return false;\n\n  const columns = checkColumns(board);\n\n  if (!columns) return false;\n\n  return checkAllSquares(board);\n};\n\nconst checkRows = (board: Array<Array<number>>): boolean => {\n  for (var y = 0; y < 9; y++) {\n    var dict: { [val: number]: boolean } = {};\n    for (var x = 0; x < 9; x++) {\n      const num = board[y][x];\n\n      if (dict[num] && num !== 0) {\n        return false;\n      }\n      dict[num] = true;\n    }\n  }\n  return true;\n};\n\nconst checkColumns = (board: Array<Array<number>>): boolean => {\n  for (var x = 0; x < 9; x++) {\n    var dict: { [val: number]: boolean } = {};\n    for (var y = 0; y < 9; y++) {\n      const num = board[y][x];\n\n      if (dict[num] && num !== 0) {\n        return false;\n      }\n      dict[num] = true;\n    }\n  }\n  return true;\n};\n\nconst checkAllSquares = (board: Array<Array<number>>): boolean => {\n  var result = true;\n  for (var x = 0; x < 9; x += 3) {\n    for (var y = 0; y < 9; y += 3) {\n      result = result && checkASquare(board, y, x);\n    }\n  }\n  return result;\n};\n\nconst checkASquare = (\n  board: Array<Array<number>>,\n  row: number,\n  column: number\n): boolean => {\n  var dict: { [val: number]: boolean } = {};\n  for (var x = 0; x < 3; x++) {\n    for (var y = 0; y < 3; y++) {\n      const num = board[y + row][x + column];\n      if (dict[num] && num !== 0) {\n        return false;\n      }\n      dict[num] = true;\n    }\n  }\n  return true;\n};\n\ninterface IPos {\n  x: number;\n  y: number;\n}\n\nexport interface IGuess {\n  x: number;\n  y: number;\n  value: number;\n}\n\nexport const noZeros = (board: Array<Array<number>>) => {\n  for (var x = 0; x < 9; x++) {\n    for (var y = 0; y < 9; y++) {\n      if (board[y][x] === 0) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nexport interface IState {\n  board: Array<Array<number>>;\n  guess: Array<IGuess>;\n  popped: boolean;\n}\n\nexport const guess = (input: IState, update: (input: IState) => void) => {\n  var guess = [...input.guess];\n  var board = input.board;\n  var popped = input.popped;\n\n  const last = guess[guess.length - 1];\n\n  if ((validInput(board) || guess.length === 0) && !popped) {\n    for (var y = last ? last.y : 0; y < 9; y++) {\n      for (var x = y === last?.y ? last.x + 1 : 0; x < 9; x++) {\n        if (board[y][x] === 0) {\n          guess.push({ x, y, value: 1 });\n          board[y][x] = 1;\n          update({\n            board,\n            guess,\n            popped: false\n          });\n          return;\n        }\n      }\n    }\n  } else {\n    if (++guess[guess.length - 1].value <= 9) {\n      const val = guess[guess.length - 1];\n      board[val.y][val.x] = val.value;\n    } else {\n      const val = guess.pop();\n\n      if (val) {\n        board[val.y][val.x] = 0;\n        update({\n          board,\n          guess,\n          popped: true\n        });\n        return;\n      }\n    }\n  }\n  update({\n    board,\n    guess,\n    popped: false\n  });\n  return;\n};\n\nexport const guessNaive = (\n  board: number[][],\n  update: (board: number[][], done: boolean, count: number) => void,\n  count: Icount\n) => {\n  /*var guess = [...input.guess];\n  var board = input.board;\n  var popped = input.popped;\n\n  const last = guess[guess.length - 1];\n\n  if ((validInput(board) || guess.length === 0) && !popped) {\n    for (var y = last ? last.y : 0; y < 9; y++) {\n      for (var x = y === last?.y ? last.x + 1 : 0; x < 9; x++) {\n        if (board[y][x] === 0) {\n          guess.push({ x, y, value: 1 });\n          board[y][x] = 1;\n          return;\n        }\n      }\n    }\n  } else {\n    if (++guess[guess.length - 1].value <= 9) {\n      const val = guess[guess.length - 1];\n      board[val.y][val.x] = val.value;\n    } else {\n      const val = guess.pop();\n\n      if (val) {\n        board[val.y][val.x] = 0;\n\n        return;\n      }\n    }\n  }\n  return;*/\n};\n\nexport interface Icount {\n  count: number;\n  state: number[][][];\n}\n\nexport const guessPrune = (\n  board: number[][],\n  update: (board: number[][], done: boolean, count: Icount) => void,\n  count: Icount\n): boolean => {\n  const tempBoard = newBoard(board);\n\n  //for each board calculate the array of options for each hole\n  //choose the option with the least options\n  const guess = calcOptions(tempBoard);\n\n  if (guess === null) {\n    update(tempBoard, true, count);\n    return true;\n  }\n\n  for (var x = 0; x < guess.options.length; x++) {\n    tempBoard[guess.y][guess.x] = guess.options[x];\n    count.state.push(newBoard(tempBoard));\n    count.count++;\n    if (validInput(tempBoard)) {\n      if (guessPrune(tempBoard, update, count)) {\n        return true;\n      }\n    }\n  }\n\n  return false; // no solutions\n};\n\ninterface coord {\n  x: number;\n  y: number;\n  options: number[];\n}\n\nconst calcOptions = (board: number[][]): coord | null => {\n  const holes: Array<coord> = [];\n  var leastOption = null;\n  for (var y = 0; y < 9; y++) {\n    for (var x = 0; x < 9; x++) {\n      if (board[y][x] === 0) {\n        var curr = getOptions(board, x, y);\n        curr = curr.reverse();\n        holes.push({\n          x,\n          y,\n          options: curr\n        });\n        if (leastOption) {\n          const len: number = leastOption.options.length;\n          leastOption =\n            len <= curr.length\n              ? leastOption\n              : {\n                  x,\n                  y,\n                  options: curr\n                };\n        } else {\n          leastOption = {\n            x,\n            y,\n            options: curr\n          };\n        }\n      }\n    }\n  }\n\n  return leastOption;\n};\n\nconst getOptions = (board: number[][], x: number, y: number): number[] => {\n  var options: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  for (var col: number = 0; col < 9; col++) {\n    const value = board[y][col];\n    options = options.filter(ele => {\n      return ele !== value;\n    });\n  }\n\n  for (var row: number = 0; row < 9; row++) {\n    const value = board[row][x];\n    options = options.filter(ele => {\n      return ele !== value;\n    });\n  }\n\n  for (\n    var col1: number = Math.floor(x / 3) * 3;\n    col1 < Math.floor(x / 3) * 3 + 3;\n    col1++\n  ) {\n    for (\n      var row1: number = Math.floor(y / 3) * 3;\n      row1 < Math.floor(y / 3) * 3 + 3;\n      row1++\n    ) {\n      const value = board[row1][col1];\n      options = options.filter(ele => {\n        return ele !== value;\n      });\n    }\n  }\n\n  return options;\n};\n\nexport const newBoard = (board: number[][]): number[][] => {\n  const newBoard = [];\n\n  for (var i = 0; i < board.length; i++) {\n    newBoard.push([...board[i]]);\n  }\n  return newBoard;\n};\n","import React from \"react\";\n\ninterface IButtonInput {\n  label: string;\n  onClick: () => void;\n}\n\nconst ButtonInput: React.FC<IButtonInput> = props => {\n  return (\n    <button id=\"start\" onClick={props.onClick}>\n      {props.label}\n    </button>\n  );\n};\n\nexport default ButtonInput;\n","import React from \"react\";\nimport ButtonInput from \"./Button\";\n\ninterface IDashboard {\n  start: () => void;\n  reset: () => void;\n}\n\nconst Dashboard: React.FC<IDashboard> = ({ start, reset }) => {\n  return (\n    <div id=\"Dashboard\">\n      <ButtonInput onClick={start} label={\"Start\"} />\n      <ButtonInput onClick={reset} label={\"Reset\"} />\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React, { useEffect } from \"react\";\nimport Board from \"./components/Board\";\nimport \"./css/App.css\";\nimport { clearBoard, selectBoard, boardArray } from \"./Constants\";\n\nimport { validInput, IGuess, Icount, newBoard, guessPrune } from \"./helpers\";\nimport Dashboard from \"./components/Dashboard\";\n\nconst App = () => {\n  const [play, setPlay] = React.useState(false);\n  const [input, setInput] = React.useState({\n    board: clearBoard,\n    guess: new Array<IGuess>(),\n    popped: false\n  });\n  const [invalid, setInvalid] = React.useState(false);\n  const [done, setDone] = React.useState(false);\n  const [count, setCount] = React.useState(0);\n  const [val, setVal] = React.useState(0);\n\n  const reset = () => {\n    setInput({\n      board: newBoard(boardArray[val]),\n      guess: new Array<IGuess>(),\n      popped: false\n    });\n  };\n\n  const start = () => {\n    if (!validInput(input.board)) {\n      setInvalid(true);\n      return;\n    }\n    setInvalid(false);\n    setPlay(true);\n    setDone(false);\n  };\n\n  const loadBoard = (board: number[][], done: boolean, count: Icount) => {\n    setInput({ guess: [], popped: false, board });\n    setDone(done);\n    setPlay(false);\n    setCount(count.count);\n  };\n\n  const counter = { count: 0, state: [] };\n\n  useEffect(() => {\n    if (play) {\n      if (!done) {\n        guessPrune(input.board, loadBoard, counter);\n      }\n    }\n  });\n\n  const EnterBoard = (event: any) => {\n    const pos = event.target.id.split(\" \");\n    var inputCopy = input.board;\n    inputCopy[Number(pos[1]) - 1][Number(pos[0]) - 1] = Number(\n      event.target.value\n    );\n    setInput({ board: inputCopy, guess: input.guess, popped: false });\n  };\n\n  const LoadBoard = (event: any) => {\n    const ind = event.target.value;\n\n    setInput({\n      board: newBoard(boardArray[ind]),\n      guess: new Array<IGuess>(),\n      popped: false\n    });\n    setVal(ind);\n  };\n\n  const boards = selectBoard.map(val => (\n    <option value={val.board}>{val.label}</option>\n  ));\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Sudoku Solver</h1>\n        <h2>\n          {invalid\n            ? \"Invalid Input\"\n            : done\n            ? \"Done\"\n            : play\n            ? \"Solving\"\n            : \"Stopped\"}\n        </h2>\n      </header>\n      <div className=\"body\">\n        <h2>Steps: {count}</h2>\n        <Board EnterBoard={EnterBoard} play={play} board={input.board} />\n        <select disabled={play} onChange={LoadBoard}>\n          {boards}\n        </select>\n        <Dashboard start={start} reset={reset} />\n      </div>\n      <footer>\n        <h2>Made by Daniel Huang</h2>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}